1
00:00:00,000 --> 00:00:06,960
Music.

2
00:00:06,810 --> 00:00:12,590
Thorsten, ganz herzlich willkommen hier auf der True Metal Stage,

3
00:00:12,770 --> 00:00:13,690
heißt das glaube ich, oder?

4
00:00:13,750 --> 00:00:17,670
Oder in der Sprache der CIM Lingen, der Tech-Track.

5
00:00:19,370 --> 00:00:25,750
Mein Name ist Thorsten Butz. Ich spreche über ein sicherlich sehr besonderes Thema.

6
00:00:25,750 --> 00:00:31,490
Gut, das tun wir alle, aber wir verbinden in dieser Session zwei Welten,

7
00:00:31,490 --> 00:00:36,950
die so in meiner Adoleszenz als IT-Mensch immer sehr getrennt waren.

8
00:00:37,030 --> 00:00:40,330
So verschiedene Religionsrichtungen, Linux, Windows und jetzt Container ist

9
00:00:40,330 --> 00:00:45,530
so eine von vielen, vielen Technologien, wo auf einmal diese Welten zusammenwachsen.

10
00:00:45,570 --> 00:00:47,130
Darüber will ich gleich reden.

11
00:00:49,030 --> 00:00:52,290
Ich muss vorweg schicken, zwei Dinge.

12
00:00:52,510 --> 00:00:56,570
Das eine ist, eigentlich ist es so ein bisschen eine Mogelpackung.

13
00:00:56,570 --> 00:01:00,550
Ich spreche gar nicht nur über Windows Server Container, da kommt noch ein bisschen was dazu.

14
00:01:00,990 --> 00:01:04,270
Viele wissen, dass in dem Kontext von Windows Server Containern immer auch wieder

15
00:01:04,270 --> 00:01:07,390
von Docker die Rede ist und da muss man erstmal aufklären, was ist das eigentlich? Endlich.

16
00:01:08,430 --> 00:01:11,670
Und jetzt, wo ich das gesagt habe, muss ich direkt das Zweite entschuldigen.

17
00:01:11,690 --> 00:01:19,150
Ich bin leider total underdressed, denn ich habe heute den André gefunden, der hier vorne sitzt.

18
00:01:19,890 --> 00:01:23,209
Und ich muss sagen, so muss man aussehen, wenn man über Windows Server Container

19
00:01:23,209 --> 00:01:25,709
redet, oder? Also einen Applaus für André. Schön, dass du da bist.

20
00:01:27,130 --> 00:01:28,349
Und danke für das Foto.

21
00:01:30,010 --> 00:01:32,670
Ja, wollte ich gerade sagen, wir haben schon drüber gesprochen,

22
00:01:32,870 --> 00:01:36,650
also so geht es nicht. Also nach der Session müssen wir uns nochmal kurz unterhalten.

23
00:01:38,610 --> 00:01:42,090
Vielen Dank an die Sponsoren, die das alle möglich machen, dass wir hier sind.

24
00:01:42,530 --> 00:01:47,670
Und ja, lasst uns loslegen mit der eigentlichen Session. Ich habe eine ganz,

25
00:01:47,790 --> 00:01:49,130
ganz kleine Werbung vorneweg. weg.

26
00:01:51,350 --> 00:01:53,990
Community ist ein gutes Stichwort. Wir haben alle so unsere Hobbys,

27
00:01:54,050 --> 00:01:59,810
was wir ganz gerne machen, ohne dass wir dann jetzt nennenswerte kapitalistische

28
00:01:59,810 --> 00:02:00,750
Absichten dahinter haben.

29
00:02:00,870 --> 00:02:02,910
Und eines meiner Hobbys, neben

30
00:02:02,910 --> 00:02:06,330
der CIM Lingen, ist, dass ich einen Podcast versuche, am Leben zu halten.

31
00:02:06,610 --> 00:02:11,850
Ich nenne ihn liebevoll Slowcast, weil relativ selten Episoden erscheinen.

32
00:02:11,949 --> 00:02:14,270
Ich bewundere die Kollegen, die das jede Woche machen.

33
00:02:14,550 --> 00:02:17,610
Und bei mir kommt dann so zweimal im Jahr, dreimal im Jahr eine neue Folge.

34
00:02:17,870 --> 00:02:22,850
Dafür ist die dann aber umso toller. Und nicht wegen mir, sondern wegen den Gästen.

35
00:02:23,110 --> 00:02:28,370
Und ich habe hier einen rausgepickt aus der langen Folge meiner Podcasts,

36
00:02:28,370 --> 00:02:29,850
weil der eben auch hier ist.

37
00:02:29,970 --> 00:02:32,610
Und ein guter Bekannter der CIM Lingen, der Benni Tritsch.

38
00:02:33,130 --> 00:02:39,110
Ich habe eine hohe Affinität, Leute zu fragen nach Sachen, die früher mal ganz

39
00:02:39,110 --> 00:02:43,330
heiß gehandelt wurden. Ich lade mir sehr gerne Gäste ein und versuche so die

40
00:02:43,330 --> 00:02:45,050
Entstehungsgeschichten nachzuvollziehen.

41
00:02:45,410 --> 00:02:48,010
Und wer immer schon mal ein bisschen was über Remote Desktops wissen wollte,

42
00:02:48,090 --> 00:02:51,850
so von den wirklichen Anfängen, das ist wirklich ein Tipp. Nicht wegen mir,

43
00:02:51,949 --> 00:02:53,070
sondern wegen Benni Tritsch.

44
00:02:53,470 --> 00:02:55,389
Hier erzählt er ja immer den aktuellen Stand.

45
00:02:59,330 --> 00:03:02,610
Das ist das obligatorische Bild. Ich habe das selber gemacht wegen Copyright.

46
00:03:02,889 --> 00:03:07,310
Man kommt nicht drum hin. Windows-Container, immer siehst du diese komischen Euro-Container.

47
00:03:07,949 --> 00:03:13,810
Und wenn man wirklich so eine Verbindung ziehen will zwischen den Containern

48
00:03:13,810 --> 00:03:18,590
in der Schifffahrt und den Containern in der IT, wenn man jetzt sehr enthusiastisch

49
00:03:18,590 --> 00:03:22,570
ist, kann man sagen, diese Container haben die Weltwirtschaft revolutioniert.

50
00:03:23,470 --> 00:03:26,890
Wie sehr ist uns gar nicht bewusst. Das, was wir Globalisierung nennen,

51
00:03:26,930 --> 00:03:30,850
wäre ohne diese extremen Billigimporte überhaupt nicht möglich.

52
00:03:30,990 --> 00:03:32,010
Ich sage das ganz wertfrei.

53
00:03:33,970 --> 00:03:37,070
Und wenn man jetzt enthusiastisch ist beim Thema IT-Container,

54
00:03:37,070 --> 00:03:40,610
könnte man sagen, die Container werden unser Leben revolutionieren,

55
00:03:40,650 --> 00:03:41,890
weil es eine ganz neue Art ist,

56
00:03:42,110 --> 00:03:48,370
in dieser sehr agilen Welt Software bereitzustellen, Lösungen bereitzustellen

57
00:03:48,370 --> 00:03:50,450
und mit minimalem Aufwand Dinge zu tun,

58
00:03:51,050 --> 00:03:54,470
die ansonsten sehr, sehr aufwendig sind. Es geht bei Containern um Einfachheit.

59
00:03:55,030 --> 00:03:59,370
Und genau wie bei den Containern in der Schifffahrt geht es um Kostensparen. Es geht um Dichte.

60
00:03:59,790 --> 00:04:03,990
Wenn man sich überlegt, wie viele Milliarden Teile transportiert werden und

61
00:04:03,990 --> 00:04:09,350
man sich dann die Stückgutkosten anguckt, dann hat man direkt eine Analogie zur IT.

62
00:04:10,510 --> 00:04:15,010
Jedem Admin fällt sofort ein, ja, aber wie ist das denn hier? Wir haben doch VMs.

63
00:04:16,550 --> 00:04:21,450
VMs sind wunderbar. Man kann auch vielleicht mit viel Fantasie so eine Konkurrenzsituation

64
00:04:21,450 --> 00:04:23,730
oder eine Ähnlichkeit sehen, da werde ich gleich drüber reden.

65
00:04:24,850 --> 00:04:29,690
Aber das ist alles gar nicht wichtig. VMs sind teuer. Wir könnten auch natürlich

66
00:04:29,690 --> 00:04:32,430
ohne diese Euro-Container Schifffahrt betreiben.

67
00:04:32,570 --> 00:04:35,450
Es ist letzten Endes alles eine Volumenfrage.

68
00:04:36,570 --> 00:04:41,130
Und wenn wir über Container reden, reden wir eben immer über Massendeployment.

69
00:04:41,170 --> 00:04:42,910
Wir reden um Vereinfachung.

70
00:04:43,110 --> 00:04:45,790
Wir reden nicht immer und nur über Security.

71
00:04:46,510 --> 00:04:49,149
Obwohl auch das ein großes Thema ist bei Windows-Container.

72
00:04:50,149 --> 00:04:54,310
Wann immer man über Container redet, taucht

73
00:04:54,310 --> 00:04:55,610
sofort das Wort Docker auf.

74
00:04:55,830 --> 00:04:58,589
Und dieses Wortspiel ist natürlich überhaupt nicht zufällig.

75
00:04:59,230 --> 00:05:02,110
Docker ist eine Linux-Firma. Punkt.

76
00:05:03,089 --> 00:05:08,570
Aber diese Firma hat offensichtlich sehr gute Arbeit geleistet und hat eine

77
00:05:08,570 --> 00:05:10,450
bestimmte Container-Lösung sehr populär gemacht.

78
00:05:11,350 --> 00:05:16,210
Und Microsoft ist dann anscheinend ebenfalls sehr begeistert gewesen von der

79
00:05:16,210 --> 00:05:17,230
Arbeit, die da geleistet wird.

80
00:05:17,290 --> 00:05:19,950
Die haben mal angeklopft bei Docker und haben gesagt, lass uns doch mal überlegen,

81
00:05:19,990 --> 00:05:21,250
ob wir nicht etwas zusammen machen können.

82
00:05:21,730 --> 00:05:25,010
Daraus ist eine Zusammenarbeit entstanden, die dann heute dazu führt,

83
00:05:25,130 --> 00:05:30,110
dass wir, wenn wir über Windows Server Container reden, wir immer sofort über Docker und Linux reden.

84
00:05:30,350 --> 00:05:33,890
Und warum das so ist und was daran so verwirrend sein kann, das will ich jetzt

85
00:05:33,890 --> 00:05:34,730
gleich technisch zeigen.

86
00:05:36,029 --> 00:05:40,210
Es gibt, wenn man Containertechnik jetzt betrachtet in dem Fokus von Microsoft,

87
00:05:40,630 --> 00:05:43,170
dann gibt es drei Lösungen, die man sehen muss.

88
00:05:43,450 --> 00:05:48,670
Das eine gab meinem Vortrag den Titel, die Windows Server Container.

89
00:05:50,450 --> 00:05:54,810
Jetzt suggeriert mein Titel dieses Vortrags, dass das ein Oberbegriff ist.

90
00:05:55,130 --> 00:05:58,190
Das ist aber nicht so. Und das macht es jetzt so ein bisschen schwierig,

91
00:05:58,310 --> 00:05:59,830
einen Titel für so einen Vortrag zu finden.

92
00:06:00,350 --> 00:06:04,290
Denn Windows Server Container sind nur eine von mehreren Spielarten.

93
00:06:04,330 --> 00:06:06,649
Die zweite Spielart sind Hyper-V Container.

94
00:06:07,230 --> 00:06:09,610
Würde ich jetzt aber meinen Vortrag Hyper-V Container nennen,

95
00:06:09,670 --> 00:06:12,010
dann würde jeder sofort an die klassische Virtualisierung denken.

96
00:06:12,230 --> 00:06:15,029
Und deswegen ist es immer so ein bisschen schwierig, den richtigen Namen zu

97
00:06:15,029 --> 00:06:19,010
finden für so einen Vortrag. Es geht also eigentlich um Container ganz allgemein.

98
00:06:19,510 --> 00:06:20,990
Und die Spielarten seht ihr da.

99
00:06:21,790 --> 00:06:24,450
Und in der Tat werden wir jetzt gleich erst mal über Docker reden.

100
00:06:24,590 --> 00:06:25,470
Also wirklich über Linux.

101
00:06:26,790 --> 00:06:30,070
Ich hoffe, ich schmerze keinen damit. Es ist mir immer ein totales Fest,

102
00:06:30,190 --> 00:06:34,430
wenn ich in einer Microsoft-affinen Veranstaltung als allererstes mal Linux zeige.

103
00:06:34,730 --> 00:06:37,490
Ich habe mir aber sagen lassen aus vertrauten Quellen in Redmond,

104
00:06:37,570 --> 00:06:38,470
dass man das heute so macht.

105
00:06:38,610 --> 00:06:44,250
Der Holger weiß das auch, wenn man nicht also dreimal in der MinuteSSH,

106
00:06:44,310 --> 00:06:47,310
Visual Studio Code und irgendwelche Unix-affinen Tools nennt,

107
00:06:47,310 --> 00:06:48,810
dann ist man nicht mehr so richtig State-of-the-Art.

108
00:06:49,410 --> 00:06:52,350
Wer sich da noch nicht so mit angefreundet hat, ihr werdet gleich sehen, was ich meine.

109
00:06:57,670 --> 00:06:58,990
Was ist das Grundprinzip?

110
00:07:01,520 --> 00:07:04,960
Ich sage zu vielen Kunden, die sich immer schwer tun mit so Neuerungen,

111
00:07:05,640 --> 00:07:08,240
ja, ja, klar, ich weiß, wie das damals war, 90er Jahre.

112
00:07:08,460 --> 00:07:12,680
So, wir sind noch in den Rechnerkeller gegangen, Datacenter heute.

113
00:07:13,300 --> 00:07:18,440
Wir haben noch jeden Computer von Hand gekannt. Wir haben Netzwerkkarten gejumpert.

114
00:07:19,120 --> 00:07:23,140
Eine tolle Zeit. Wir hatten auch kein Internet. Patchen war obsolet.

115
00:07:23,140 --> 00:07:26,220
Der berühmte NetWare-Server, den man eingemauert hat, nie wieder gebraucht hat.

116
00:07:26,600 --> 00:07:28,540
Ich sage mal so, es war eine andere Zeit.

117
00:07:29,940 --> 00:07:34,600
Als dann Virtualisierung kam im Sinne von VMware und in der Masse stattfand,

118
00:07:34,700 --> 00:07:38,460
bin ich mir ganz sicher, haben ganz viele von uns diskutiert,

119
00:07:38,480 --> 00:07:42,880
das kann doch nicht sicher sein, wenn jetzt einer hier unseren VMware-Host hackt.

120
00:07:43,020 --> 00:07:45,420
Da sind alle 50 VMs tot.

121
00:07:46,720 --> 00:07:49,900
Ich bin mir sicher, wir haben genau die gleichen Diskussionen geführt,

122
00:07:49,920 --> 00:07:52,940
die wir heute über Container führen werden, führen oder führen werden.

123
00:07:54,160 --> 00:07:58,520
Der Punkt ist, VMware, Hyper-V, Xen-Server, die ganze Virtualisierung,

124
00:07:58,540 --> 00:08:03,220
die wir heute haben, KVM, die haben einfach gewonnen, weil der Kompromiss stimmt.

125
00:08:03,580 --> 00:08:07,380
Die Kosten sind unfassbar viel geringer, als würden wir jetzt wirklich ständig

126
00:08:07,380 --> 00:08:08,180
Hardware verschrauben.

127
00:08:09,160 --> 00:08:10,660
Und die Sicherheit ist gut genug.

128
00:08:12,240 --> 00:08:15,460
Klar, auch aus einer virtuellen Maschine kann ich ausbrechen auf einen Host.

129
00:08:15,620 --> 00:08:18,360
Ich muss nur lange genug warten, bis ein Fehler gefunden wird in der Software.

130
00:08:18,800 --> 00:08:22,320
Aber die Wahrscheinlichkeit im Verhältnis zum Nutzen, dass das passiert, ist recht gering.

131
00:08:22,820 --> 00:08:25,700
Also muss man immer überlegen, welche Payload hat man? Worum geht es mir?

132
00:08:26,020 --> 00:08:27,660
Wie sensibel sind meine Daten?

133
00:08:28,100 --> 00:08:30,780
Das ist ja im Grunde genommen, ich will diese Diskussion jetzt nicht anfangen,

134
00:08:30,800 --> 00:08:33,420
ich will sie nur kurz erwähnen, im Grunde ist das das gleiche,

135
00:08:33,420 --> 00:08:37,679
was wir immer mit diesen Wolkenthemen haben, wenn wir also in einem Internet

136
00:08:37,679 --> 00:08:40,179
Daten veröffentlichen.

137
00:08:40,179 --> 00:08:44,480
In meinen Augen sind die sicherer als bei mir zu Hause, weil da muss ich wirklich

138
00:08:44,480 --> 00:08:50,240
alles tun, um nur Berechtigten Zugriff zu geben, wohingehend ich mich vielleicht

139
00:08:50,240 --> 00:08:53,900
in meinem eigenen Rechenzentrum darauf verlasse, dass es da eine Tür gibt,

140
00:08:53,920 --> 00:08:54,660
die ich abschließen kann.

141
00:08:54,740 --> 00:08:57,240
Aber wenn wir ehrlich sind, auch in unseren Rechenzentren habe ich zwar eine

142
00:08:57,240 --> 00:09:00,220
physische Zugangskontrolle, aber selbstverständlich...

143
00:09:01,730 --> 00:09:06,230
Darum geht es nicht. Kein Mensch, der was von uns will, kommt physisch vorbei und bricht ein.

144
00:09:06,790 --> 00:09:10,030
Das muss man im Hinterkopf haben. Das heißt, bei dieser Skala,

145
00:09:10,049 --> 00:09:11,890
die uns begleitet über unser Berufsleben,

146
00:09:12,210 --> 00:09:16,549
ich habe angefangen in den 90ern mit sowas wie Virtual Hosting,

147
00:09:16,610 --> 00:09:18,770
weil alles andere war für meine

148
00:09:18,770 --> 00:09:21,850
Kleingarten-Webseite und für meinen Fußballverein nicht finanzierbar.

149
00:09:22,010 --> 00:09:25,090
Ich hätte auch lieber einen Root-Server gehabt. War viel zu teuer.

150
00:09:26,809 --> 00:09:29,790
Ja, chroot-Umgebung kennt ihr von Linux wahrscheinlich,

151
00:09:30,170 --> 00:09:32,309
also das ein bisschen sicherer zu machen.

152
00:09:33,510 --> 00:09:38,150
Bei BSD gibt es die Jails, die schon sehr viel Ähnlichkeit

153
00:09:38,150 --> 00:09:42,030
haben mit Containertechnik und Container unter Windows, unter Linux,

154
00:09:42,170 --> 00:09:43,730
Entschuldigung, so wie Docker das macht,

155
00:09:43,890 --> 00:09:48,270
sind halt ein Kompromiss und der Mensch, der Docker erfunden hat,

156
00:09:48,410 --> 00:09:49,970
hat eigentlich nichts anderes gemacht,

157
00:09:50,170 --> 00:09:54,370
ohne das jetzt zu schmälern, als vorhandene Konzepte des Linux-Kernels und des Linux-

158
00:09:55,090 --> 00:10:01,790
Umfeldes zu bündeln, indem er so Techniken wie Namespaces genommen hat und einfach

159
00:10:01,790 --> 00:10:04,950
gesagt hat, wenn ich das alles geschickt kombiniere und benutzerfreundlich mache,

160
00:10:05,190 --> 00:10:09,850
dann habe ich ein hohes Maß an Sicherheit bei einer maximalen Dichte.

161
00:10:10,470 --> 00:10:14,690
Das ist das, worum es geht. Und als Microsoft mit Docker zusammengearbeitet

162
00:10:14,690 --> 00:10:17,950
hat, haben sie dann sehr schnell entdeckt, dass Microsoft spezifisch in seinem

163
00:10:17,950 --> 00:10:21,950
Kundenumfeld vielleicht den einen oder anderen hat, der sagt,

164
00:10:22,030 --> 00:10:24,570
diese Isolierung, die Docker bietet, reicht mir nicht,

165
00:10:24,710 --> 00:10:27,510
weil ein mögliches Problem bei Docker ist,

166
00:10:27,710 --> 00:10:30,870
du musst bei Docker Vertrauen in den Linux-Kernel haben.

167
00:10:30,870 --> 00:10:36,850
Denn auf dem Container Host ist der gleiche Kernel zu sehen,

168
00:10:36,870 --> 00:10:39,570
der arbeitet dort, der auch im Container die Arbeit tut.

169
00:10:39,890 --> 00:10:43,429
Das heißt, rein theoretisch gesprochen, wenn jemand eine Schwachstelle im Linux-Kernel

170
00:10:43,429 --> 00:10:48,130
findet, kann er natürlich aus dem Container hinaus auf das Host-System ausbrechen.

171
00:10:48,590 --> 00:10:53,630
Und das war eine der Grundideen bei Microsoft, das können wir Microsoft besser.

172
00:10:53,990 --> 00:10:56,090
Wir können eine zusätzliche Härtung

173
00:10:56,090 --> 00:10:59,530
anbieten, indem wir Hyper-V-Container erfinden. Das ist eine Melange.

174
00:11:00,809 --> 00:11:04,770
Aus Hyper-V und Windows-Containern, die im Grunde darauf beruht,

175
00:11:04,870 --> 00:11:09,250
dass ich den Kernel von Windows nicht in den Container hineinreiche,

176
00:11:09,350 --> 00:11:10,670
sondern ihn quasi dupliziere.

177
00:11:11,450 --> 00:11:15,410
Also der Container kriegt seinen eigenen Kernel. Es ist unter Windows so,

178
00:11:15,530 --> 00:11:18,590
dass wir keinen monolithischen Kernel haben, wo wir mal irgendwie so eine Datei

179
00:11:18,590 --> 00:11:20,750
im RAM haben, einen Prozess und das war's.

180
00:11:21,309 --> 00:11:24,330
Sondern der Windows-Kernel ist sehr modular aufgebaut.

181
00:11:25,250 --> 00:11:29,910
Und das heißt, es müssen jede Menge Prozesse gespiegelt werden in die Container.

182
00:11:29,910 --> 00:11:31,809
Und das erzeugt Overhead.

183
00:11:32,270 --> 00:11:36,750
Was ihr sofort merken werdet, wenn ihr damit arbeitet, ist, dass Hyper-V-Container

184
00:11:36,750 --> 00:11:42,010
schon ganz subjektiv wesentlich rechenintensiver sind als Windows-Server-Container.

185
00:11:42,049 --> 00:11:44,490
Aber man muss überlegen, wann macht das Sinn?

186
00:11:45,429 --> 00:11:49,230
Um die wichtigste aller Fragen vorwegzunehmen,

187
00:11:49,390 --> 00:11:52,070
löst das jetzt die Virtualisierung, wie wir sie kennen, ab?

188
00:11:52,290 --> 00:11:55,270
Nee, wahrscheinlich erst mal nicht, schon gar nicht in den nächsten Jahren,

189
00:11:55,370 --> 00:11:58,130
weil der typische Anwendungsfall ist ein völlig anderer.

190
00:11:58,590 --> 00:12:02,549
Der typische Anwendungsfall für Windows Server Container oder Docker Container

191
00:12:02,549 --> 00:12:03,610
ist heute sowas wie WordPress.

192
00:12:04,570 --> 00:12:07,450
Sachen, die du schnell bereitstellst, weil jetzt eine neue Staffel von House

193
00:12:07,450 --> 00:12:10,870
of Cards losläuft und du mal eben 10.000 Web-Server brauchst.

194
00:12:11,429 --> 00:12:14,250
Domänen-Controller sind dafür nicht geeignet. Nicht im Moment.

195
00:12:14,790 --> 00:12:18,070
Man kann natürlich überlegen, es gibt immer eine Zukunft, mal gucken,

196
00:12:18,090 --> 00:12:20,429
wie sich das entwickelt, vielleicht verschmelzen diese Techniken.

197
00:12:23,690 --> 00:12:26,290
Wenn man sich Docker anguckt, wie das arbeitet, ich habe gerade schon gesagt,

198
00:12:26,490 --> 00:12:28,010
das sind Techniken, die alle schon da sind.

199
00:12:28,049 --> 00:12:31,770
Die Firma Google hat sehr viel dazu beigetragen, dass diese Technologie existiert.

200
00:12:31,809 --> 00:12:36,470
Auch viele andere, aber ich glaube, Google ist einer der intensivsten Player in diesem Umfeld.

201
00:12:37,410 --> 00:12:40,750
Und was jetzt passiert ist, schlicht und ergreifend im Jahr 2013,

202
00:12:40,809 --> 00:12:45,770
dass das jemand nettzusammengebaut hat, eine Art Store entwickelt hat,

203
00:12:45,830 --> 00:12:47,350
den Docker Hub, den sehen wir gleich.

204
00:12:48,010 --> 00:12:51,990
Und in diesem Store kannst du im Grunde genommen Festplatten-Images runterziehen.

205
00:12:51,990 --> 00:12:57,970
Das heißt, wenn man sich jetzt so vorstellt, du würdest einfach in der Microsoft

206
00:12:57,970 --> 00:13:02,790
Gallery oder im Microsoft Store fertige, startfähige VHDX-Dateien herunterladen

207
00:13:02,790 --> 00:13:05,710
können, dann hat das eine gewisse Ähnlichkeit mit Images. ist.

208
00:13:06,550 --> 00:13:10,950
Nur, dass man bei Containern immer so ein Designziel hat.

209
00:13:11,010 --> 00:13:14,610
Man sagt immer so, ein Ding in einen Container. Also wir mischen nicht Fahrräder

210
00:13:14,610 --> 00:13:17,650
und Mofas in so einem Container, sondern in einen so einem Container kommen nur Fahrräder.

211
00:13:18,350 --> 00:13:22,410
Das führt dann dazu, dass man bei einer typischen Lösung wie WordPress eben

212
00:13:22,410 --> 00:13:27,250
nicht eine Image herunterlädt, sondern du hast sowas wie Linux als Basis.

213
00:13:27,870 --> 00:13:32,390
Darüber hast du dann ein "Müskel", also ein MySQL, sagen viele.

214
00:13:33,410 --> 00:13:38,390
Oder eine MariaDB oder sonst was. Du hast PHP und dann obendrauf ein Nginx oder

215
00:13:38,390 --> 00:13:41,690
ein Apache und das stapelst du alle so aufeinander.

216
00:13:41,750 --> 00:13:45,590
So gesehen hätte man vielleicht Copyright-mäßig problematisch diese Lösung auch

217
00:13:45,590 --> 00:13:48,370
Lego nennen können, weil das ist exakt das, worum es geht.

218
00:13:49,490 --> 00:13:51,930
Und wenn man sich jetzt anguckt, was das eigentlich technisch ist,

219
00:13:51,990 --> 00:13:54,850
diese Images sind im Grunde genommen nichts anderes als so eine Idee von so

220
00:13:54,850 --> 00:13:58,230
Differencing Disks, Overlay File System,

221
00:13:58,430 --> 00:14:01,650
wer das kennt, ich sag mal so Stichwort Knoppix, so wie das arbeitet,

222
00:14:01,790 --> 00:14:06,090
du startest eine DVD und damit du Änderungen im laufenden Betrieb machen kannst,

223
00:14:06,310 --> 00:14:08,650
die du bei Knoppix nicht wirklich machen kannst,

224
00:14:08,950 --> 00:14:12,630
erzeugt der Klaus Knopper so einen Overlay FS und da kannst du reinschreiben

225
00:14:12,630 --> 00:14:14,230
und wenn du dann die Maschine ausmachst, ist es weg.

226
00:14:15,270 --> 00:14:18,170
Diese Ähnlichkeit, glaube ich, darf man da sehen.

227
00:14:20,950 --> 00:14:24,230
Das wirklich Schöne, und ich bitte so ein bisschen um Verständnis,

228
00:14:24,290 --> 00:14:26,890
dass ich das aus strategischen Gründen alleine schon mache.

229
00:14:27,730 --> 00:14:32,590
Das Schöne an Docker und an einer Demo von Docker ist im Allgemeinen,

230
00:14:32,590 --> 00:14:37,050
Klopf aufs Holz, das ist sehr schlank, das ist sehr ausgereift,

231
00:14:37,110 --> 00:14:38,170
das ist sehr zuverlässig.

232
00:14:38,210 --> 00:14:42,730
Deswegen ist das Schöne bei einem Windows-Server-Container-Vortrag,

233
00:14:42,730 --> 00:14:44,910
dass man eigentlich ganz gerne erst mal Docker zeigen möchte.

234
00:14:45,450 --> 00:14:48,350
Das hat aber noch einen ganz anderen, ganz wesentlichen Grund.

235
00:14:48,570 --> 00:14:52,090
Ich glaube, dass viele von uns, die hier im Raum sind, schon mal versucht haben,

236
00:14:52,170 --> 00:14:54,870
sich diesem Thema zu nähern, aber so ein bisschen gescheitert sind,

237
00:14:55,010 --> 00:14:56,430
weil man nicht weiß, wo man anfangen soll.

238
00:14:56,650 --> 00:15:02,550
Fängt man an zu googeln, zu bingen, findet man seitenweise Texte und man weiß

239
00:15:02,550 --> 00:15:03,950
gar nicht, wo fange ich jetzt an?

240
00:15:04,050 --> 00:15:06,270
Dann stellt man fest, das eine ist schon wieder obsolet.

241
00:15:06,490 --> 00:15:09,450
Es ist sehr, sehr schwierig, Windows Server Container zu verstehen,

242
00:15:09,510 --> 00:15:11,530
wie wir gleich sehen werden in der zweiten Demo.

243
00:15:12,770 --> 00:15:13,950
Weil ich sage mal vorsichtig.

244
00:15:16,150 --> 00:15:19,590
Aber ausgereift ist anders, würde ich jetzt mal so sagen.

245
00:15:19,750 --> 00:15:24,390
Und zwar ausgereift in dem Sinne, dass wenn ich mir ein Auto kaufe,

246
00:15:24,470 --> 00:15:25,730
dann will ich ja nicht nur einen Motor.

247
00:15:26,150 --> 00:15:29,090
Es gibt so Leute, die basteln den ganzen Tag an ihren Kisten.

248
00:15:30,330 --> 00:15:33,650
Ich fahre so ein Auto, was total unspannend ist, weil ich will einfach nur, dass das läuft.

249
00:15:34,750 --> 00:15:39,490
Und wenn du das willst, ist übertragen auf IT, ist Windows Server Container,

250
00:15:39,510 --> 00:15:43,230
ist nicht dein Thema, weil es ist alles nur Kommandozeile, es ist alles nur Web.

251
00:15:43,930 --> 00:15:46,770
Und es ist nicht mal PowerShell. Jetzt denken ja die meisten so,

252
00:15:46,790 --> 00:15:50,690
ja klar, PowerShell wie immer. Nein, wir sind schon wieder beyond PowerShell, komme ich gleich zu.

253
00:15:51,350 --> 00:15:53,830
Deswegen viel einfacher zu verstehen ist Docker. Weil alles,

254
00:15:53,870 --> 00:15:57,690
was du machen musst, du installierst dir irgendwo eine VM, hab ich schon gemacht, Ubuntudu vor mir aus.

255
00:15:58,230 --> 00:16:00,410
Und dann machst du Upget, Install, Docker I.O., fertig.

256
00:16:01,510 --> 00:16:03,890
Das ist jetzt nicht das, wie die Nerds das machen. Ich zeige gleich,

257
00:16:04,010 --> 00:16:05,330
wie man das noch ein bisschen besser machen kann.

258
00:16:05,930 --> 00:16:09,610
Aber das reicht zum Ausprobieren. Und dann stellt man fest, das sieht man hier

259
00:16:09,610 --> 00:16:14,110
auch auf der Liste, egal was du aufrufst, du rufst, sobald du Docker hast,

260
00:16:14,190 --> 00:16:15,430
immer nur den Befehl Docker auf.

261
00:16:17,210 --> 00:16:18,930
Jetzt könnte natürlich jemand auf die Idee kommen, zu sagen,

262
00:16:19,030 --> 00:16:21,490
okay, pass auf, ich gehe mal eben Kaffee holen. Wenn Windows kommt, komme ich wieder.

263
00:16:21,590 --> 00:16:25,970
Nee, bleibt hier, weil ich kann die Überschrift austauschen,

264
00:16:26,690 --> 00:16:30,350
Die Windows-Befehle sind vollkommen identisch. Ich darf das mal vorwegnehmen.

265
00:16:30,450 --> 00:16:32,410
Deswegen merkt euch bitte, wenn ihr euch das merken wollt, alles,

266
00:16:32,530 --> 00:16:37,030
was ich jetzt zeige, weil es wird eins zu eins genauso unter Windows eben auch gemacht.

267
00:16:37,730 --> 00:16:41,350
Und wir gucken uns das jetzt mal an, wie das dann so aussieht.

268
00:16:41,870 --> 00:16:43,170
Ich habe da was vorbereitet.

269
00:16:45,350 --> 00:16:49,770
Ich hoffe, dass das jetzt alle einigermaßen lesen können. Ich bin hier auf einem,

270
00:16:49,790 --> 00:16:54,510
hier unten im roten Bereich, ich habe das oben so mit Markup ein bisschen eingeblendet,

271
00:16:54,510 --> 00:16:57,110
als Erinnerung für mich, aber auch damit ihr das besser sehen könnt,

272
00:16:57,230 --> 00:16:58,290
so ein paar Basisbefehle.

273
00:16:59,730 --> 00:17:03,550
Ich bin hier unten auf einer Linux-Maschine. Das ist...

274
00:17:07,170 --> 00:17:09,790
Jetzt kriegen sie schon die erste eine Krise, weil sie sagen,

275
00:17:09,890 --> 00:17:11,810
jetzt lerne ich die ganze Zeit PowerShell, jetzt muss ich mir auch noch diese

276
00:17:11,810 --> 00:17:12,990
Linux-Befehle drauf schaffen.

277
00:17:13,150 --> 00:17:16,070
Ich fürchte, das ist die traurige Wahrheit. Da kommen wir jetzt alle nicht drum

278
00:17:16,070 --> 00:17:18,230
herum, weil das alles immer weiter zusammenwächst.

279
00:17:18,810 --> 00:17:24,630
Das ist ein Ubuntu und was ich hier gemacht habe, ist ist, ich habe bereits...

280
00:17:27,320 --> 00:17:33,540
In der Sources-List das Paket-Repository von Docker hinterlegt.

281
00:17:35,020 --> 00:17:38,060
Unter Debian-basierenden Systemen ist es dankenswerterweise so,

282
00:17:38,160 --> 00:17:41,000
für die Windows-Leute so etwas Ähnliches wie PowerShell-Gallery,

283
00:17:41,180 --> 00:17:44,160
aber in richtig vollständig.

284
00:17:45,300 --> 00:17:50,000
Du kannst Paket-Repositories angeben, über die du dir Software nachinstallierst,

285
00:17:50,060 --> 00:17:51,520
apt-get install, viele werden das kennen.

286
00:17:52,500 --> 00:17:55,820
Und du kannst natürlich dein eigenes Private-Repository dort eintragen.

287
00:17:55,820 --> 00:17:59,740
Und das kannst du jetzt auch nutzen, um zu sagen, ich verbinde mich direkt mit Docker.

288
00:17:59,980 --> 00:18:02,540
Dann sparst du dir den Umweg über die Distribution.

289
00:18:03,119 --> 00:18:07,700
Und das hat einfach was mit Aktualität zu tun. Wir haben bei Ubuntu im Moment

290
00:18:07,700 --> 00:18:12,920
Docker, ich weiß gar nicht, irgendwie 1.12 oder sowas und wir haben da 1.17 oder so.

291
00:18:13,000 --> 00:18:16,820
Also sehr viel aktueller, als wenn du über die Distri gehst. Wir sehen das gleich.

292
00:18:17,580 --> 00:18:21,640
Das heißt, man sieht hier unten, bei dem, was ich hier markiere,

293
00:18:22,160 --> 00:18:26,280
sieht man, ich habe halt einfach eingetragen, dass meine Paketverwaltung direkt

294
00:18:26,280 --> 00:18:28,520
Docker fragt und damit bekomme ich die aktuellste Version.

295
00:18:28,920 --> 00:18:33,560
Muss man das machen? Nein. Für den Anfang reicht sicherlich der Weg über die Distribution.

296
00:18:34,740 --> 00:18:38,599
Das ist aber alles dokumentiert. Die ganzen Skripte und so weiter kriegt ihr

297
00:18:38,599 --> 00:18:41,500
natürlich durch die Folien zum Download. Ich mache so ein ZIP-Paket.

298
00:18:43,220 --> 00:18:47,320
Ich glaube, dass das sehr stark helfen kann. Einfach sich da mal durchzuklicken

299
00:18:47,320 --> 00:18:49,700
und mal so eine Idee zu kriegen, wie das Ganze funktioniert.

300
00:18:50,820 --> 00:18:53,900
Vielleicht noch eine kleine Anekdote, warum das Docker.io heißt.

301
00:18:54,320 --> 00:18:57,700
Es gab einfach schon eine Software, die Docker heißt. Das ist so eine relativ

302
00:18:57,700 --> 00:19:01,900
unbedeutende heute Trace-Software, aber die hieß halt schon Docker.

303
00:19:02,380 --> 00:19:07,859
Und deswegen musste man ein bisschen improvisieren. Wenn du über das Docker-Repository

304
00:19:07,859 --> 00:19:12,580
installierst, dann heißt es mittlerweile Docker-CE oder Docker.ce,

305
00:19:12,580 --> 00:19:17,119
je nachdem, worüber man das macht. CE steht für Community Edition.

306
00:19:17,540 --> 00:19:21,260
Und man hört daran schon, Docker sucht jetzt mal nach Möglichkeiten, Geld zu verdienen.

307
00:19:21,340 --> 00:19:24,560
Das heißt, es wird jetzt eine Enterprise Edition geben, was das Ganze natürlich

308
00:19:24,560 --> 00:19:26,220
dann auch nicht gerade übersichtlicher macht.

309
00:19:27,570 --> 00:19:32,010
Ihr seht hier oben in dem Markup, wie man das alles genau einrichtet.

310
00:19:32,010 --> 00:19:35,849
Man braucht bei dem Repository halt noch so den PGP-Key, damit geprüft werden

311
00:19:35,849 --> 00:19:40,650
kann, ob die Prüfsummen der Pakete stimmen. Das habe ich alles schon ausgeführt.

312
00:19:41,930 --> 00:19:45,330
So, und dann gehen wir hier so runter und dann sieht man hier diesen ersten Teil.

313
00:19:45,830 --> 00:19:50,070
Hier wird es jetzt ernst. Wenn ich also Docker schon habe, dann ist so immer

314
00:19:50,070 --> 00:19:52,390
der erste Schritt, dass man mal guckt, welche Version hat man.

315
00:19:52,869 --> 00:19:57,970
Docker Version. Und ich sage es nochmal dabei, das ist exakt dasselbe,

316
00:19:57,970 --> 00:20:00,730
was du auch unter Windows machst, wie ihr gleich sehen werdet.

317
00:20:00,730 --> 00:20:01,890
Das ist überhaupt gar kein Unterschied.

318
00:20:02,030 --> 00:20:04,630
Da steht dann halt was anderes. Da hast du dann vielleicht eine andere Version.

319
00:20:05,050 --> 00:20:07,470
Oder bei der Plattform, bei der API steht irgendwas anderes.

320
00:20:07,810 --> 00:20:10,869
Da steht dann eben nicht Linux. So, das ist eigentlich alles.

321
00:20:13,010 --> 00:20:16,270
docker -version, docker -info ist, wenn ich das jetzt aufrufe,

322
00:20:16,290 --> 00:20:18,770
sehr komplex. Da kriegst du sehr, sehr viele Informationen.

323
00:20:19,550 --> 00:20:23,730
Unter Windows ist dann irgendwann später wichtig, dass der Isolation-Mode dort auch angezeigt wird.

324
00:20:23,830 --> 00:20:27,369
Also wenn du wissen willst, ob du Hyper-V-Container gerade als Default hast,

325
00:20:27,530 --> 00:20:29,050
dann kannst du das zum Beispiel danach gucken.

326
00:20:29,690 --> 00:20:32,390
Das sieht man hier sehr schön. Das ist sehr viel Information.

327
00:20:33,250 --> 00:20:35,330
Und da sieht man aber dann schon alles, was abgeht.

328
00:20:37,030 --> 00:20:40,230
Das ist der ganze Trick. So.

329
00:20:41,030 --> 00:20:43,530
Das heißt, wir wissen jetzt im Grunde genommen, dass das läuft.

330
00:20:43,730 --> 00:20:47,450
Was auch immer ganz hilft, ist den Docker-Dienst nochmal zu starten.

331
00:20:48,490 --> 00:20:52,710
Das könnte man mit Systems Control machen. Und dann ist natürlich der erste

332
00:20:52,710 --> 00:20:55,450
Schritt, wenn man jetzt an eine Maschine geht, wo man noch nie war, Docker PS.

333
00:20:55,830 --> 00:20:58,170
Und jetzt kommen die interessanten Sachen für Windows-Admins.

334
00:20:59,109 --> 00:21:02,750
Wenn du jetzt unter einem Stein gelebt hast in den letzten 20 Jahren und hast

335
00:21:02,750 --> 00:21:05,050
noch nie Unix gesehen, dann sagt dir PS gar nichts.

336
00:21:06,450 --> 00:21:08,810
Wenn du aber zumindest mal ein bisschen PowerShell gemacht hast,

337
00:21:08,869 --> 00:21:13,690
dann weißt du, dass es einen Alias gibt für Get-Process, der heißt PS.

338
00:21:13,970 --> 00:21:18,030
Und warum gibt es den? Weil PS unter Linux, unter Unix schon immer der Befehl

339
00:21:18,030 --> 00:21:19,730
war, mit denen man sich Prozesse anguckt.

340
00:21:20,970 --> 00:21:24,790
Und die Docker-Jungs haben sich gedacht, das nutzen wir einfach, dass das jeder kennt.

341
00:21:25,010 --> 00:21:28,210
Wir zeigen zwar jetzt nicht Prozesse an, aber wir zeigen unsere Container an.

342
00:21:28,290 --> 00:21:30,030
Das kann man sich relativ leicht merken.

343
00:21:30,390 --> 00:21:34,230
Und das führt dann unter Windows dazu, dass du dir die laufenden Container mit

344
00:21:34,230 --> 00:21:36,010
Docker PS ebenfalls auch anguckst.

345
00:21:36,050 --> 00:21:38,050
Das Problem ist nur, dass dir das unter Windows nichts sagt,

346
00:21:38,230 --> 00:21:40,750
weil du vielleicht PS bisher nicht kanntest.

347
00:21:42,030 --> 00:21:46,990
Dann sieht man, ich habe gar keine, ich bin ja auch neu, aber das ist nicht

348
00:21:46,990 --> 00:21:50,770
ganz zuverlässig, denn Docker PS zeigt nur die laufenden Prozesse an,

349
00:21:50,830 --> 00:21:51,790
die laufenden Container.

350
00:21:52,150 --> 00:21:57,310
PS -a wie all zeigt dir auch die an, die ich vielleicht mal initiiert und wieder gestoppt habe.

351
00:21:58,030 --> 00:22:01,130
Und da sieht man, oh jo, da habe ich doch tatsächlich schon ein paar am Laufen

352
00:22:01,130 --> 00:22:06,070
gehabt, denn die sind offensichtlich alle gestoppt, sonst würde ich die ja jetzt nicht sehen.

353
00:22:07,960 --> 00:22:11,800
Ja, man fragt sich dann immer, soll man sowas Triviales wie docker run hello-world

354
00:22:11,800 --> 00:22:14,619
überhaupt zeigen? Ja, natürlich, weil es gehört halt dazu.

355
00:22:15,560 --> 00:22:18,960
Machen wir das halt. Aber wir müssen dann mal erklären, was dann eigentlich

356
00:22:18,960 --> 00:22:21,180
genau passiert bei docker run hello-world.

357
00:22:22,940 --> 00:22:28,060
So. Wer jetzt übrigens irgendwas total Spektakuläres an der Stelle erwartet,

358
00:22:28,760 --> 00:22:32,020
das ist ja schon sehr spektakulär, aber wenn ihr noch was anderes erwartet,

359
00:22:32,780 --> 00:22:36,800
Docker ist am Anfang natürlich erstmal spröde, weil es geht um Server-Workload.

360
00:22:36,800 --> 00:22:40,440
Du kriegst jetzt nicht keine spektakulären grafischen Oberflächen gezeigt oder so.

361
00:22:40,840 --> 00:22:43,580
Das ist dafür nicht gemacht, obwohl es auch das denkbar ist.

362
00:22:43,640 --> 00:22:44,480
Da komme ich zum Schluss zu.

363
00:22:46,520 --> 00:22:51,000
Was passiert, wenn ich docker run hello-world aufrufe? Man muss drei Schritte zurückgehen.

364
00:22:51,400 --> 00:22:54,760
Das erste, was du eigentlich machst, ist, wenn du mit Docker arbeitest,

365
00:22:54,900 --> 00:22:58,920
du gehst ins Web, gehst auf die Webseite der Firma Docker und guckst dir mal

366
00:22:58,920 --> 00:23:02,700
an, was machen die denn so? Dann landest du ganz automatisch im Hub.

367
00:23:03,000 --> 00:23:04,440
Der Hub ist quasi der Store.

368
00:23:05,240 --> 00:23:08,700
Und da gibt man dann Sachen ein, für die man sich interessiert. Zum Beispiel Drupal.

369
00:23:09,660 --> 00:23:14,140
Drupal, eigentlich niederländisch für Tropfen, sprechen die meisten Leute sehr

370
00:23:14,140 --> 00:23:16,359
komisch aus. Und Drupal ist, glaube ich, korrekt.

371
00:23:17,359 --> 00:23:21,560
Und dann siehst du, es gibt eine fertige Lösung.

372
00:23:21,880 --> 00:23:26,300
Drupal ist ein Content-Management-System, also ähnlich wie WordPress, Konkurrenzprodukt.

373
00:23:26,820 --> 00:23:30,580
Und ich persönlich finde, Drupal ist sehr kompliziert aufzusetzen.

374
00:23:31,040 --> 00:23:35,380
Mit Containern ist das sehr, sehr viel einfacher. Aber Drupal gehört zu den

375
00:23:35,380 --> 00:23:39,040
vielen, vielen Lösungen, die halt eine Datenbank brauchen.

376
00:23:39,740 --> 00:23:44,220
Webserver, die wildesten Konfigurationen. Und die Grundidee ist bei Containern,

377
00:23:44,260 --> 00:23:49,140
dass nicht du als Admin das bereitstellst, und das ist der eigentlich interessante

378
00:23:49,140 --> 00:23:51,740
Teil, sondern dass der Hersteller das macht.

379
00:23:51,740 --> 00:23:54,740
Das heißt, wenn es eine Community gibt, die sowas wie WordPress Triple entwickelt,

380
00:23:55,060 --> 00:23:59,240
die absolut ganz genau wissen, was sie brauchen an Prerequisites,

381
00:23:59,400 --> 00:24:05,500
dann lasst die doch einfach die Setup-Exe machen. Ich gebe mal eine Analogie für ein Windows-Admin.

382
00:24:05,560 --> 00:24:09,840
Kennt ihr diese Setup-Exes, die dir dann erklären, hey, du brauchst erstmal

383
00:24:09,840 --> 00:24:12,340
ein .NET-Framework, 43, ein Achtel.

384
00:24:13,540 --> 00:24:20,119
Abbrechen. Und du denkst dir, dann installier es doch. Es gibt ja auch Setup-Exe,

385
00:24:20,240 --> 00:24:21,020
die bringen das dann mit.

386
00:24:22,460 --> 00:24:27,760
Und im Grunde genommen ist das genau das. Die bringen einfach das mit, was es braucht.

387
00:24:28,000 --> 00:24:30,840
Und das ist naturgemäß bei Open-Source-Produkten sehr, sehr einfach.

388
00:24:32,540 --> 00:24:36,020
Ich sage nicht, dass das bei Closed-Source-Produkten jetzt grundsätzlich komplizierter

389
00:24:36,020 --> 00:24:38,240
ist, aber bei Open-Source-Produkten ist es erstmal einfach, weil die Sachen

390
00:24:38,240 --> 00:24:39,380
sind sowieso alle erreichbar.

391
00:24:42,300 --> 00:24:45,340
Jetzt kannst du dort aber auch hingehen und kannst mal nach Microsoft suchen.

392
00:24:45,940 --> 00:24:52,040
Dann stellst du fest, oh, da gibt es aber, da kannst du jetzt seitenweise blättern.

393
00:24:52,599 --> 00:24:55,359
Da gibt es jetzt einiges und jetzt fällt euch vielleicht auf,

394
00:24:55,420 --> 00:24:57,580
auf der linken Seite, ich zeige das gleich in der Docker-Konsole.

395
00:25:01,190 --> 00:25:04,010
Dir fällt auf, auf der linken Seite steht immer Microsoft, dann kommen hier

396
00:25:04,010 --> 00:25:07,710
ganz viele Bezeichner. Das gleiche, das gucken wir uns jetzt mal an,

397
00:25:07,770 --> 00:25:08,849
über die Kommandozeile.

398
00:25:10,230 --> 00:25:11,190
Fangen wir mal an mit,

399
00:25:13,849 --> 00:25:16,630
docker search drupal.

400
00:25:18,630 --> 00:25:21,390
Und dann sieht man sehr schön, was ich gerade im Web gemacht habe.

401
00:25:22,310 --> 00:25:27,150
In der Kommandozeile wird deutlich, dass es viele Container gibt,

402
00:25:27,230 --> 00:25:30,950
die irgendwas mit diesem CMS erst zu tun haben, aber es gibt genau eines, das ist Official.

403
00:25:31,790 --> 00:25:35,130
Und das ist jetzt wichtig so für die Praxis, weil auf der linken Seite sieht

404
00:25:35,130 --> 00:25:39,710
man, in dem Moment, wo das Official ist, siehst du auf der linken Seite keinen

405
00:25:39,710 --> 00:25:41,990
Vorspann. Der Vorspann ist nämlich der Benutzername.

406
00:25:42,290 --> 00:25:45,550
Und wenn da kein Benutzername steht, ist das von Docker geprüft.

407
00:25:45,650 --> 00:25:46,850
Und das ist jetzt wiederum wichtig.

408
00:25:49,530 --> 00:25:54,710
Geprüft heißt, dass der Entwickler Docker dafür bezahlt, das ist deren aktuelles

409
00:25:54,710 --> 00:25:56,970
Geschäftsmodell, dass sie das Prüfen.

410
00:25:57,950 --> 00:26:01,330
Das ist nicht von Docker selber entwickelt. Die prüfen das einfach nur.

411
00:26:01,530 --> 00:26:04,790
Und im Umkehrschluss heißt das, alles, was nicht official ist,

412
00:26:05,970 --> 00:26:08,990
wird eben nicht geprüft. Das ist at your own risk.

413
00:26:11,370 --> 00:26:17,330
Machen wir das gleiche mit Microsoft. Docker Search. Ich mach mal PowerShell direkt.

414
00:26:19,110 --> 00:26:23,370
PowerShell, super Thema. Ihr wart bei Holger gerade im Vortrag.

415
00:26:23,490 --> 00:26:27,170
Ihr wollt PowerShell. Vielleicht hast du es auch schon gerade gezeigt.

416
00:26:28,430 --> 00:26:33,170
Du willst PowerShell ausprobieren und hast keine Lust groß, was zu installieren oder so.

417
00:26:33,330 --> 00:26:37,590
Und dann siehst du, ach guck, es gibt einen Container, der heißt Microsoft PowerShell. So, spannend.

418
00:26:38,470 --> 00:26:41,410
Und der ist recht populär, wie man hier drüben sieht, aber man sieht auch,

419
00:26:41,430 --> 00:26:44,270
der ist jetzt nicht official. Naja, der ist halt von Microsoft bereitgestellt.

420
00:26:44,470 --> 00:26:45,590
So, das ist der ganze Witz.

421
00:26:46,450 --> 00:26:48,950
Gucken wir uns mal diese Lösung an.

422
00:26:50,890 --> 00:26:54,250
So wie ich jetzt nach PowerShell suche, kann ich auch nach nach hello-world suchen.

423
00:26:54,530 --> 00:26:57,910
Und was ich dann feststelle ist, es gibt ein Image, was so heißt,

424
00:26:58,050 --> 00:27:01,470
und dieses Image kann ich dann herunterladen. Machen wir also mal das als letzten Test.

425
00:27:03,070 --> 00:27:10,330
Docker hello- World. Zack. Docker search hello-world wäre auch eine gute Idee.

426
00:27:11,110 --> 00:27:15,110
So, zack. Und dann sieht man, es gibt wieder - ganz viele Lachen - und

427
00:27:15,110 --> 00:27:17,690
hier oben sieht man, ah ja, das ist wirklich genau das Gleiche.

428
00:27:17,690 --> 00:27:21,210
Also hello-world ist gleichrangig zu all dem, was wir gerade gesehen haben.

429
00:27:21,270 --> 00:27:23,070
Zu drupal, zu PowerShell, etc.

430
00:27:23,450 --> 00:27:26,570
So, und wie arbeite ich jetzt damit? Ich habe jetzt was gefunden, was mich interessiert.

431
00:27:27,910 --> 00:27:29,410
Und das mache ich dann mit docker-pull.

432
00:27:31,950 --> 00:27:38,530
Sekunde. Docker pull. Ja, und jetzt kann ich halt einen Drupal herunterladen.

433
00:27:38,530 --> 00:27:41,450
Dann lädt er alle Pre-Requisites herunter. Jetzt wird es gefährlich,

434
00:27:41,450 --> 00:27:43,390
weil es kann jetzt ein längerer Download sein.

435
00:27:45,610 --> 00:27:49,450
Und jetzt sieht man, der lädt Dinge herunter. Und das Charmante ist jetzt,

436
00:27:49,530 --> 00:27:53,870
wenn ihr auf die Dateigrößen guckt, die da übers Web fliegen.

437
00:27:55,050 --> 00:27:58,570
Drupalist relativ groß. Ich weiß jetzt nicht genau, wie groß das alles in

438
00:27:58,570 --> 00:27:59,970
Summe ist. Das können wir uns gleich angucken.

439
00:28:01,510 --> 00:28:06,050
Ihr ladet unter Linux typischerweise Dinge herunter, die kleiner sind als 20

440
00:28:06,050 --> 00:28:09,310
MB. Je nachdem, was man macht, kann es natürlich auch riesig groß werden.

441
00:28:10,050 --> 00:28:15,610
Aber diese Optimierung ist eben das Interessante, dass man als Container viele Sachen weglassen kann.

442
00:28:15,770 --> 00:28:18,850
Das heißt, die Idee hinter dem Container ist, wenn wir über Serverdichte sprechen,

443
00:28:19,090 --> 00:28:23,350
dass wir natürlich auch Dinge schon im Download weglassen können,

444
00:28:23,450 --> 00:28:25,050
von denen wir wissen, die sind schon längst da.

445
00:28:25,050 --> 00:28:30,550
Wenn man mal das über virtuelle Maschinen überträgt, da hast du ja auch das

446
00:28:30,550 --> 00:28:34,310
Gefühl, warum brauche ich eigentlich auf meinem VMWare-Host oder auf meinem

447
00:28:34,310 --> 00:28:37,390
Hyper-V-Host 35 mal C\Windows\WinSXS?

448
00:28:37,910 --> 00:28:39,030
Könnte man das nicht weglassen?

449
00:28:39,990 --> 00:28:43,250
Das ist die gleiche Idee. So, und jetzt sieht man, ich habe hier Drupal.

450
00:28:44,550 --> 00:28:50,370
Das könnte ich jetzt gleich starten. Machen wir das Gleiche nochmal mit docker pull PowerShell.

451
00:28:52,270 --> 00:28:56,750
Und die hatte ich schon mal runtergeladen, Deswegen könnte das jetzt sehr,

452
00:28:56,870 --> 00:28:58,430
sehr schnell gehen, wenn ich mich nicht vertippt hätte.

453
00:28:59,930 --> 00:29:03,250
Microsoft, davor schreiben wir eine gute Idee. Denn Offizielles gibt es nicht,

454
00:29:03,310 --> 00:29:04,050
haben wir gerade schon gesehen.

455
00:29:04,810 --> 00:29:07,630
Vielen Dank. Und dann seht ihr Already Exists. Deswegen geht das jetzt schneller.

456
00:29:07,750 --> 00:29:10,150
Und jetzt guckt ihr noch, ob irgendwas fehlt und lädt das auch noch runter.

457
00:29:11,130 --> 00:29:13,530
So, jetzt habe ich ein paar Sachen runtergeladen. Das kann man ein bisschen

458
00:29:13,530 --> 00:29:16,310
vergleichen. Ich weiß immer, dass die Leute immer so Analogien suchen,

459
00:29:16,430 --> 00:29:17,410
obwohl die gefährlich sind.

460
00:29:18,030 --> 00:29:20,550
Aber wenn ihr in einer Hyper-V-Konsole was installieren wollt,

461
00:29:20,630 --> 00:29:24,570
dann ladet ihr vorher eine ISO-Datei runter. Nur, dass die eben typischerweise Gigabytes groß ist.

462
00:29:26,150 --> 00:29:30,070
Wenn ich das jetzt starten will, ist der Weg dahin, das zu starten, ganz einfach.

463
00:29:30,150 --> 00:29:32,130
Ihr habt vorhin gesehen, ich muss das nicht mal runterladen,

464
00:29:32,210 --> 00:29:36,570
weil der Docker-Client guckt automatisch nach, habe ich das denn überhaupt und lädt alles runter.

465
00:29:37,190 --> 00:29:39,730
Deswegen findet ihr in den meisten Anleitungen immer nur docker run,

466
00:29:39,810 --> 00:29:41,230
docker run, docker run, docker run.

467
00:29:41,590 --> 00:29:44,170
Wenn du aber schon vorher weißt, du kommst irgendwo hin, wo du kein Internet

468
00:29:44,170 --> 00:29:47,250
hast, dann wäre es eine ganz gute Idee, das vorher mal runterzuladen.

469
00:29:47,250 --> 00:29:49,750
Das ist aber nur ein Tipp für Dozenten. Der Rest der Welt, dem ist das egal.

470
00:29:50,950 --> 00:29:53,690
So, jetzt ist die Frage, wie starte ich jetzt so einen Container?

471
00:29:55,770 --> 00:29:58,490
Fangen wir das mal an mit etwas ganz Klassischem und dann komme ich gleich zur

472
00:29:58,490 --> 00:30:01,510
PowerShell und dann gucken wir uns nochmal Nginx an und solche Sachen und dann

473
00:30:01,510 --> 00:30:03,290
kommen wir auch gleich zu den Windows Server Containern.

474
00:30:06,810 --> 00:30:08,530
Ich starte so einen Container,

475
00:30:10,650 --> 00:30:14,850
in dem ich zum Beispiel sage, Docker Run Ubuntu,

476
00:30:16,170 --> 00:30:18,530
Das Problem ist, wenn ich das jetzt mache dann guckt der nach,

477
00:30:18,650 --> 00:30:22,710
habe ich ein Abbild von Ubuntu dann lädt der das Aber das Problem ist,

478
00:30:22,730 --> 00:30:28,970
dann startet der Container und nichts passiert.

479
00:30:29,050 --> 00:30:29,810
Was ist das Problem?

480
00:30:31,430 --> 00:30:34,410
Ubuntu im Container laufen zu lassen ist ein super untypisches Beispiel,

481
00:30:34,630 --> 00:30:41,390
weil Ubuntu ist ein Betriebssystem. Ich will aber Lösungen installieren.

482
00:30:42,010 --> 00:30:45,330
Das heißt, Ubuntu ist eigentlich nur für Developer gedacht, die jetzt selber

483
00:30:45,330 --> 00:30:47,830
ein Container-Image erstellen wollen und die dann folgendes machen.

484
00:30:48,310 --> 00:30:53,370
Die gehen dann hin und sagen, starte doch mal interaktiv Ubuntu,

485
00:30:53,530 --> 00:30:55,850
und zwar eine Bash, damit ich da Änderungen machen kann.

486
00:30:57,390 --> 00:31:00,090
Und jetzt seht ihr sehr schön, jetzt sind wir zum ersten Mal,

487
00:31:00,250 --> 00:31:02,450
sind wir in einem Container drin.

488
00:31:03,610 --> 00:31:07,210
Und wer Jeffrey Snovers Zitat kennt mit den Cattles und Pets,

489
00:31:07,350 --> 00:31:11,910
der weiß sofort, was das hier alles, ist, dass das hier genau dieser Ansatz ist.

490
00:31:12,010 --> 00:31:16,110
Wir haben jetzt hier keinen nennenswert sinnvollen Host-Namen mehr,

491
00:31:16,210 --> 00:31:20,790
sondern wir haben Nummern, weil kein Mensch interessiert sich für die Host-Namen von Containern.

492
00:31:21,410 --> 00:31:26,230
Wir haben eine Optimierung, die dazu führt, dass ich nicht mal mehr sowas habe

493
00:31:26,230 --> 00:31:28,430
wie ifconfig, weil wofür sollte ich das brauchen?

494
00:31:29,390 --> 00:31:32,450
Wenn ich das brauche, kann ich das installieren. Dann muss ich aber so Sachen

495
00:31:32,450 --> 00:31:37,830
machen wie apt-get install, nee, apt-get update muss ich erstmal machen,

496
00:31:37,830 --> 00:31:40,090
damit er erstmal weiß, was habe ich denn.

497
00:31:40,510 --> 00:31:43,490
Dann kann ich irgendwie apt-get install net-tools machen.

498
00:31:43,750 --> 00:31:46,390
Also ein unheimliches Gefrickel. Aber ich sage nochmal dazu,

499
00:31:46,590 --> 00:31:49,450
das ist eigentlich nicht dein Job als Admin. Du startest fertige Lösungen.

500
00:31:49,510 --> 00:31:51,930
Ich zeige jetzt gerade, was überhaupt darunter zu verstehen ist.

501
00:31:52,810 --> 00:31:56,790
So, jetzt bin ich in dem Container. Jetzt sage ich hier apt-get install net-tools.

502
00:31:57,170 --> 00:31:59,170
So. Und jetzt habe ich gleich ifconfig.

503
00:32:00,050 --> 00:32:03,350
Die meisten Leute sagen, ja, ifconfig ist ja deprecated. Deswegen liefern die

504
00:32:03,350 --> 00:32:06,430
das nicht mehr mit. Aber ich bin ein alter Mann. Ich will ifconfig haben.

505
00:32:06,830 --> 00:32:11,090
Jetzt sieht man, jetzt habe ich ifconfig. Und wenn ich jetzt ernsthaft damit

506
00:32:11,090 --> 00:32:14,890
weiterarbeiten würde, würde ich feststellen, ich schließe den Container, alles ist weg.

507
00:32:16,380 --> 00:32:19,020
Wenn ich jetzt ein Entwickler bin, der eine fertige Lösung bereitstellt,

508
00:32:19,120 --> 00:32:21,740
müsste ich mir überlegen, wie gehe ich jetzt ganz genau vor?

509
00:32:21,860 --> 00:32:27,180
Ich könnte dann diesen Container committen, irgendwo bereitstellen und ihr könntet euch den ziehen.

510
00:32:27,460 --> 00:32:29,520
Das Problem ist, das Zeug veraltet ja sofort.

511
00:32:29,840 --> 00:32:33,400
Deswegen macht es keinen Sinn, so zu arbeiten, auch wenn ich das jetzt in dieser Demo mal tue.

512
00:32:34,200 --> 00:32:38,560
Sondern was man will, ist die Linux-Variante von desired state configuration.

513
00:32:39,200 --> 00:32:42,500
Und das ist ein Docker-File. Das heißt, alles, was ich jetzt gerade gemacht

514
00:32:42,500 --> 00:32:45,400
habe, schreibe ich, ich sage mal für die Windows-Leute, in eine Batch-Datei.

515
00:32:46,380 --> 00:32:50,240
Die nennt sich Dockerfile, ist aber in Wirklichkeit sehr ähnlich einer Batch-Datei.

516
00:32:50,480 --> 00:32:53,360
Und da schreibe ich dann rein: run, apt-getinstall.

517
00:32:53,840 --> 00:32:57,600
Und dann passiert alles das. Und dieses Kochrezept, das lege ich auf GitHub

518
00:32:57,600 --> 00:32:59,280
und alle sind glücklich. Das ist der Sinn.

519
00:32:59,600 --> 00:33:02,540
So will man damit arbeiten und du bist nur noch der Konsument.

520
00:33:03,060 --> 00:33:05,520
Und in die Rolle des Konsumenten begebe ich mich jetzt rein.

521
00:33:09,220 --> 00:33:16,700
Jetzt starten wir mal docker run Microsoft Microsoft PowerShell und jetzt wieder das Gleiche.

522
00:33:16,880 --> 00:33:19,380
Vorsicht, ich will ja was sehen. Minus IT.

523
00:33:21,840 --> 00:33:26,420
Und dann sieht man, jo geil. PowerShell 6. Ich bin glücklich.

524
00:33:27,800 --> 00:33:34,120
Alles klar. Wow. Das Problem ist nur, für viele vielleicht überraschend.

525
00:33:34,860 --> 00:33:36,460
Was habe ich jetzt für ein Betriebssystem da?

526
00:33:38,080 --> 00:33:46,300
Linux. Weil es gibt eine ganz simple Regel. Linux-Container-Hosts können Linux virtualisieren.

527
00:33:46,840 --> 00:33:49,980
Linux als Container anbieten, aber keine anderen Betriebssysteme.

528
00:33:50,080 --> 00:33:52,260
Keine anderen Betriebssysteme im Sinne von Windows.

529
00:33:52,680 --> 00:33:56,760
Was du unter Docker schon machen kannst, ist auf einem Ubuntu-Host ein CentOS

530
00:33:56,760 --> 00:33:59,260
abbilden. Das geht, aber das ist ja auch beides Linux.

531
00:34:00,200 --> 00:34:04,600
Du kannst aber keinen Nano-Server laufen lassen. Du kannst keinen Windows-Server-Core

532
00:34:04,600 --> 00:34:08,880
oder sowas laufen lassen, weil es ein völlig anderes Betriebssystem ist. Das will auch niemand.

533
00:34:10,260 --> 00:34:14,600
Außer Microsoft. Weil die haben sich nämlich überlegt, wenn wir jetzt unter

534
00:34:14,600 --> 00:34:18,120
Windows-Server- Containern was machen, ist das ja total doof,

535
00:34:18,140 --> 00:34:20,520
dass wir diese ganze Linux-Welt nicht unterstützen können.

536
00:34:20,680 --> 00:34:23,660
Und das ist ja irgendwie ein Mangel. Deswegen werdet ihr gleich im Anschluss

537
00:34:23,660 --> 00:34:25,980
sehen, dass Microsoft dafür eine Lösung hat.

538
00:34:26,380 --> 00:34:28,580
Zumindest mal in Zukunft. Das ist gerade in der Entwicklung.

539
00:34:28,580 --> 00:34:31,940
Dass du unter Windows, unter bestimmten Voraussetzungen, sowohl Windows als

540
00:34:31,940 --> 00:34:34,880
auch Linux virtualisieren kannst im Sinne von Containern.

541
00:34:34,920 --> 00:34:38,460
Das ist dann ein Alleinstellungsmerkmal. Das wird noch spannend werden.

542
00:34:38,460 --> 00:34:44,560
So, machen wir noch ein letztes Beispiel, damit ihr nochmal was seht,

543
00:34:44,580 --> 00:34:46,800
was hierzu wirklich relativ lebensnah ist.

544
00:34:46,900 --> 00:34:49,140
Ich scrolle mal so ein bisschen runter, damit man das hinten auch sieht.

545
00:34:49,320 --> 00:34:52,860
Hier sind ganz viele Beispiele drin, die man alle mal so durchklicken kann,

546
00:34:52,960 --> 00:34:59,180
wie man damit arbeitet und ich will euch mal eines zeigen, was man hier ganz gut sieht.

547
00:35:01,680 --> 00:35:07,219
Diesen Teil hier. Du kannst nämlich auch, wenn du jetzt einfach einen Dienst

548
00:35:07,219 --> 00:35:10,160
haben willst, etwas demonized laufen lassen. Das ist der Normalfall.

549
00:35:11,120 --> 00:35:14,400
Und was man dann normalerweise laufen lassen will, ist sowas wie ein Nginx.

550
00:35:15,100 --> 00:35:17,960
Das ist ein Web-Server. Apache wäre eine andere Alternative.

551
00:35:18,699 --> 00:35:22,140
Jetzt muss ich aber eines bedenken. Wenn ihr gerade ganz genau hingeguckt habt,

552
00:35:22,180 --> 00:35:26,940
habt ihr gesehen, dass der Container so eine komische IP-Adresse hat. 172.17.

553
00:35:28,820 --> 00:35:35,320
Das ist ein Problem. Und wenn ich das vergleiche mit meinem Host-System,

554
00:35:35,400 --> 00:35:37,480
der hat einen ganz anderen IP-Kreis, dann werde ich feststellen,

555
00:35:37,600 --> 00:35:38,920
im Default wird das ge-nat-et.

556
00:35:39,460 --> 00:35:43,140
Das heißt, der Web-Server hier ist für mich nicht unbedingt sichtbar.

557
00:35:43,140 --> 00:35:47,260
Und deswegen macht man jetzt typischerweise Folgendes. Man macht ein Port Forwarding

558
00:35:47,260 --> 00:35:50,320
und sagt, dass der Port 80 aus

559
00:35:50,320 --> 00:35:54,520
der internen Maschine an mein Host-System weitergereicht wird mit Port 80.

560
00:35:56,260 --> 00:36:00,260
So, dann wird ein Container erstellt. Das sieht man hier. Und jetzt kann ich

561
00:36:00,260 --> 00:36:03,800
hier hingehen und kann sagen, ich tippe die IP-Adresse meiner VM ein.

562
00:36:04,300 --> 00:36:10,580
Ich weiß, welche das ist, nämlich 192.168.0.253. Und hier ist mein NginX.

563
00:36:11,460 --> 00:36:14,640
Ja, und das wäre jetzt im Grunde mit WordPress Drupal genau das Gleiche.

564
00:36:14,640 --> 00:36:17,560
Du kannst sofort klick, klick, klick, klick, kannst das Zeug einrichten, bist glücklich.

565
00:36:18,400 --> 00:36:21,160
Was dabei jetzt noch wichtig zu verstehen ist, jetzt muss ich aber so ein bisschen

566
00:36:21,160 --> 00:36:23,199
auf die Tube drücken und zeige das nochmal hier oben.

567
00:36:23,840 --> 00:36:26,340
Jetzt will man natürlich nicht bei dieser Standard-Webseite bleiben,

568
00:36:26,420 --> 00:36:27,699
sondern man will Content liefern.

569
00:36:28,340 --> 00:36:31,140
Und das macht man auf eine ganz einfache Art und Weise. Beispielsweise,

570
00:36:31,219 --> 00:36:36,400
das zeige ich jetzt nur mal hier oben, um ein bisschen Zeit zu sparen,

571
00:36:36,420 --> 00:36:41,080
wenn ihr erlaubt, ich ergänze diesen Befehl von gerade mit "-v".

572
00:36:41,080 --> 00:36:48,199
Das bedeutet nämlich dann, ich mounte ein Verzeichnis aus meinem realen System

573
00:36:48,199 --> 00:36:54,180
in den Container und kann dann einfach die Webseite außen auf mein Host-System legen.

574
00:36:54,180 --> 00:36:57,160
Das ist die Art und Weise, wie man damit arbeitet.

575
00:36:57,440 --> 00:37:00,540
Und wenn ihr das selber mal ausprobiert, werdet ihr sehen, das ist das,

576
00:37:00,580 --> 00:37:03,239
was funktioniert wunderbar. Das ist Docker.

577
00:37:06,480 --> 00:37:10,219
Noch viele mehr Beispiele hier drin. Man könnte noch viel, viel mehr erzählen.

578
00:37:11,180 --> 00:37:15,840
Aber 45 Minuten, it's a quick. Es ist eine kurze Zeit. So, und jetzt kommen wir zu Windows.

579
00:37:16,040 --> 00:37:18,380
Jetzt kann ich das schnell machen, weil alles, was ihr gerade gesehen habt,

580
00:37:18,420 --> 00:37:19,800
könnt ihr eins zu eins so eintippen.

581
00:37:21,280 --> 00:37:26,560
Wir haben mit Windows Server2016, wie immer enorme Datenmengen.

582
00:37:27,500 --> 00:37:32,199
Und wir entdecken sehr schnell, wenn wir jetzt mit so Giganten wie Windows mit

583
00:37:32,199 --> 00:37:35,060
grafischer Oberfläche oder auch Windows Core, wenn ihr vergleicht,

584
00:37:35,060 --> 00:37:38,100
hier hat grün ist Core, das ist mehr als die Hälfte der Daten,

585
00:37:38,100 --> 00:37:39,239
die so ein grafischer Server hat.

586
00:37:40,480 --> 00:37:44,420
Wenn wir damit arbeiten, das macht keinen Sinn im Containerumfeld.

587
00:37:44,440 --> 00:37:46,300
Wir wollen miniaturisierte Betriebssysteme haben.

588
00:37:46,440 --> 00:37:51,680
Und dafür, ganz wesentlich dafür, hat Microsoft den nano server erfunden der

589
00:37:51,680 --> 00:37:54,580
ist mit sehr mit ein paar hundert megabyte relativ klein bitte,

590
00:37:56,780 --> 00:37:59,320
Nicht für Container, für Container lebt er weiter, da komme ich jetzt drauf.

591
00:37:59,500 --> 00:38:03,080
Das heißt, im Kontext von Containern will man auf jeden Fall mit dem Nano-Server

592
00:38:03,080 --> 00:38:04,560
arbeiten, das wird jetzt gleich noch wichtig.

593
00:38:06,560 --> 00:38:11,940
Dafür haben sie ihn ganz wesentlich entwickelt. Der Nano-Server ist extrem funktional beschränkt.

594
00:38:11,960 --> 00:38:15,199
Wer bei Windows Server 2016 sich den mal angeguckt hat, so auf die normale Art

595
00:38:15,199 --> 00:38:18,540
und Weise, der weiß, das Ding macht so in dem Zustand wenig Sinn.

596
00:38:18,540 --> 00:38:23,239
Für einen Admin, kann kein Domänen-Controller sein, den kann man nicht mal aktivieren.

597
00:38:23,560 --> 00:38:26,440
Okay, den muss man nicht aktivieren. Der kann aber nicht mal Windows-Updates

598
00:38:26,440 --> 00:38:29,360
einspielen. So automatisch geht nicht, muss man von Hand machen.

599
00:38:32,300 --> 00:38:33,719
Jetzt hat sich Microsoft offensichtlich

600
00:38:33,719 --> 00:38:37,699
gedacht, naja, wir geben den mal raus in der ersten Version.

601
00:38:38,020 --> 00:38:41,680
Der Codename war Tuva. Tuva ist eine Region in der ehemaligen Sowjetunion.

602
00:38:42,640 --> 00:38:45,500
Und Tuva hat 170.000 Quadratmeter, sagt die Wikipedia.

603
00:38:45,860 --> 00:38:49,900
Und ich habe mir immer gedacht, da geht doch noch mehr, oder?

604
00:38:50,000 --> 00:38:51,100
Das ist doch nicht das kleinste Land.

605
00:38:51,480 --> 00:38:54,760
Und ich habe immer gedacht, das Ding müsste eigentlich Codename Vatikan heißen.

606
00:38:55,860 --> 00:38:58,300
Und offensichtlich hat mich bei Microsoft irgendjemand erhört.

607
00:38:58,320 --> 00:39:01,400
Die haben sich nämlich gedacht, bei der nächsten Release, die jetzt im Oktober

608
00:39:01,400 --> 00:39:07,060
rauskommt, dass die Release, die 1709 heißt, weil der Oktober der neunte Monat ist, ihr kennt das.

609
00:39:09,100 --> 00:39:12,400
Also bei der nächsten Release von Windows Server gibt es eine aktualisierte

610
00:39:12,400 --> 00:39:19,160
Version vom Nano-Server, die wesentlich kleiner ist und die dann von diesen

611
00:39:19,160 --> 00:39:22,940
paar hundert Megabyte nochmal deutlich das Ganze reduziert. Das ist die Zukunft.

612
00:39:23,199 --> 00:39:26,219
Ich sage mal Codename Vatikan. Und jetzt machen wir es ganz schnell.

613
00:39:28,320 --> 00:39:31,280
Viele sagen, naja, Microsoft hat sich jetzt irgendwie von Docker da irgendwie

614
00:39:31,280 --> 00:39:32,300
die Technologie übernommen.

615
00:39:32,380 --> 00:39:37,320
Wichtig ist, Microsoft hat mit Docker zusammen den Client entwickelt,

616
00:39:37,620 --> 00:39:40,860
beziehungsweise das Client-Konzept, die API von Docker übernommen,

617
00:39:40,900 --> 00:39:45,100
weil man den Gedanken hatte, und der ist gut, wenn jemand den Docker-Client

618
00:39:45,100 --> 00:39:46,460
bedienen kann unter Linux, dann

619
00:39:46,460 --> 00:39:49,280
kann der direkt auch Docker unter Windows bedienen, das ist doch super.

620
00:39:50,199 --> 00:39:54,520
Das ist die Idee dahinter. Und die Engine, die hatte Microsoft schon vorher.

621
00:39:54,900 --> 00:39:59,960
Das heißt, 2008 wurde Hyper-V erfunden. Das hat mit Docker zumindest mal nichts zu tun.

622
00:40:01,180 --> 00:40:05,460
Sie hatten dann dieses Projekt Drawbridge, aus dem die Container Engine entstanden

623
00:40:05,460 --> 00:40:09,020
ist, so ein Stück weit. Und2013 haben sie dann diese Partnerschaft angefangen.

624
00:40:10,000 --> 00:40:13,460
Ich habe ein paar konzeptionelle Folien in dem Vortrag, wie das so funktioniert,

625
00:40:13,620 --> 00:40:15,140
dass das sehr unterschiedlich ist auch.

626
00:40:15,840 --> 00:40:19,360
Aber wichtig ist, es gibt eine einzige Sache, die wirklich entscheidend ist.

627
00:40:19,820 --> 00:40:23,600
Du kannst halt sagen, wenn deine Maschine zusätzlich Hyper-V-Host ist,

628
00:40:24,520 --> 00:40:28,300
dass du eine zusätzliche Prozessisolierung haben möchtest, die über das normale

629
00:40:28,300 --> 00:40:32,880
Maß hinausgeht und so eine Art Mini-VM baust. Das ist der besondere Merkmal.

630
00:40:33,560 --> 00:40:38,460
Und wenn in Zukunft Microsoft auch Linux-Workloads unterstützt,

631
00:40:39,020 --> 00:40:42,960
Dann wird es so sein, dass das den Hyper-V-Modus, die Hyper-V-Isolation braucht.

632
00:40:43,360 --> 00:40:46,080
Das ist so das, was angekündigt ist, Stichwort Linux-Kit.

633
00:40:47,739 --> 00:40:50,540
Wie setzt man das Ganze auf? Und jetzt muss ich sagen, wenn ihr auf die Uhr

634
00:40:50,540 --> 00:40:52,699
guckt, wisst ihr, ich habe jetzt nicht mehr so viel Zeit. Ich habe so ein bisschen

635
00:40:52,699 --> 00:40:55,560
euch betuppen. Ich habe die ganze Zeit Linux gezeigt, aber ich habe noch einen Trick.

636
00:40:56,400 --> 00:41:00,660
So setzt man die Windows-Server-Container auf. Das ist ein sehr langwieriges Verfahren.

637
00:41:00,760 --> 00:41:05,840
Und das eigentlich Spezielle ist, wenn du die Container installierst,

638
00:41:05,880 --> 00:41:07,620
das seht ihr jetzt gleich. Ich mache das nämlich jetzt.

639
00:41:09,020 --> 00:41:12,180
Dann hast du kein Frontend, sondern, Achtung.

640
00:41:15,790 --> 00:41:22,830
Schönen Gruß an den Nils. Ich habe ein Video gedreht. Ich habe andere Kollegen auch schon gesehen.

641
00:41:23,190 --> 00:41:29,030
Ihr seht mich jetzt dort in dem Video installieren. Es tut mir leid,

642
00:41:29,030 --> 00:41:31,150
dass jetzt auf dem Projektor das so ein bisschen abgeschnitten ist,

643
00:41:31,210 --> 00:41:32,590
aber ihr seht im Wesentlichen, was es geht.

644
00:41:33,290 --> 00:41:35,690
Das Ganze dauert in Echtzeit, je nach

645
00:41:35,690 --> 00:41:39,310
Internetleitung, ich sage jetzt mal vorsichtig, mindestens 20 Minuten.

646
00:41:40,110 --> 00:41:44,430
Das ist der Grund, warum ich das aufgenommen habe und das ist jetzt zwölffache Geschwindigkeit.

647
00:41:45,170 --> 00:41:51,630
Und was ihr jetzt seht, ist, ich installiere über den Windows-Server zwei Feature,

648
00:41:51,690 --> 00:41:53,410
nämlich sowohl Container als auch Hyper-V.

649
00:41:53,510 --> 00:41:56,770
Dann wird die Maschine gleich rebooten. Das Video geht insgesamt zweieinhalb

650
00:41:56,770 --> 00:41:58,810
Minuten, also das schaffen wir locker in unserer Zeit.

651
00:42:00,410 --> 00:42:04,489
Und jetzt rebootet die Maschine und danach werdet ihr jetzt sehen,

652
00:42:04,550 --> 00:42:07,070
ich habe keinerlei Frontends zur Verwaltung. Nichts.

653
00:42:08,150 --> 00:42:12,270
Keine PowerShell-Befehle. Nichts. Jetzt muss ich mir etwas besorgen,

654
00:42:12,310 --> 00:42:14,410
mit dem ich das verwalten kann. Da gibt es zwei Möglichkeiten.

655
00:42:14,670 --> 00:42:19,150
Die einzig sinnvolle ist, du installierst docker.exe. Das mache ich jetzt damit.

656
00:42:20,370 --> 00:42:24,489
Über die Paketverwaltung von Windows registriere ich den Microsoft-Provider.

657
00:42:24,610 --> 00:42:28,930
Das kriegt ihr alles als Skripte. Probiert das aus. Anschließend müssen wir nochmal rebooten.

658
00:42:29,850 --> 00:42:35,530
Und am Ende des Tages habe ich docker.exe. Und am Ende des Tages ist alles genauso wie unter Linux.

659
00:42:37,090 --> 00:42:40,330
Nur mit dem Unterschied. Dann kann ich eben den Nano-Server starten etc.

660
00:42:41,969 --> 00:42:45,290
Aufgrund der fortgeschrittenen Zeit, ich könnte jetzt in den Server gehen und euch das zeigen.

661
00:42:47,810 --> 00:42:50,610
Ich hoffe, ihr glaubt mir, dass das wirklich genau das Gleiche ist.

662
00:42:52,750 --> 00:42:56,090
Wir rebooten jetzt. Wir sehen jetzt gleich Docker-Exe. Dann ist der Film zu

663
00:42:56,090 --> 00:42:58,469
Ende. Und dann wollen wir kurz darüber reden, wie es dann weitergeht.

664
00:43:01,110 --> 00:43:05,390
Da sieht man das jetzt, da bin ich am Ende. Und jetzt suche ich gleich nach dem Kommando.

665
00:43:06,170 --> 00:43:10,969
Da ist docker.exe. Wenn ich das eintippe. Ihr dürft euch bei der PowerShell ISE,

666
00:43:11,610 --> 00:43:15,989
bei der ISE, wie immer ihr das ausspricht, ihr dürft euch nicht wundern,

667
00:43:15,989 --> 00:43:18,270
wenn die Schrift da so komisch rot ist. Das ist kein Fehler.

668
00:43:18,670 --> 00:43:21,110
Der stellt die Hilfe-Funktion ein bisschen merkwürdig dar.

669
00:43:22,330 --> 00:43:27,250
Man muss sehr, sehr vorsichtig sein. docker.exe in der ISE zu benutzen.

670
00:43:27,710 --> 00:43:31,670
Dreiviertel der Funktionen sind da dysfunktional. Das ist ein sehr gefährliches

671
00:43:31,670 --> 00:43:33,350
Unterfangen. Holger nickt schon.

672
00:43:34,810 --> 00:43:39,449
Seid sehr vorsichtig. Macht das besser lokal. Macht das mit PowerShell.exe.

673
00:43:40,110 --> 00:43:43,530
Das ist, sag ich mal, nicht ganz fertig engineert.

674
00:43:45,510 --> 00:43:51,270
Der Nano-Server, und das ist der Preis, den wir bezahlen, der stirbt jetzt, hat Microsoft gesagt.

675
00:43:51,670 --> 00:43:55,489
Weil sie konzentrieren sich auf die Weiterentwicklung des Nano-Servers als Container.

676
00:43:55,510 --> 00:43:58,370
Hey, Nano-Server ist tot, es lebe der Nano-Server.

677
00:44:01,710 --> 00:44:04,430
Das gefällt nicht jedem, ich finde das sehr schade, aber das ist ein anderes

678
00:44:04,430 --> 00:44:08,330
Thema. Ich hätte gerne den Nano-Server behalten für General Purpose.

679
00:44:08,890 --> 00:44:12,469
Als Container lebt er weiter, er wird reduziert werden. Und dann ist die Frage,

680
00:44:12,530 --> 00:44:15,550
da muss man sich mit den .NET-Developern unterhalten, was macht man dann damit?

681
00:44:16,370 --> 00:44:21,110
Reicht PowerShell Core, reicht .NET Core, um sinnvolle Applikationen zu bauen?

682
00:44:21,270 --> 00:44:22,890
Das ist dann die nächste große Frage.

683
00:44:24,170 --> 00:44:26,830
Wir haben dann angeblich, das ist ja noch nicht veröffentlicht,

684
00:44:26,930 --> 00:44:28,690
weniger als 50 Prozent in der Größe.

685
00:44:29,969 --> 00:44:32,850
Ich bin sehr gespannt, was daraus wird. Es ist ein sperriges Thema.

686
00:44:33,370 --> 00:44:36,130
Und wer ein bisschen ausprobieren will, zwei Tipps. Erster Tipp,

687
00:44:36,250 --> 00:44:37,830
probiert das erstmal mit Linux.

688
00:44:37,989 --> 00:44:40,430
Das ist jetzt keine Linux-Werbung, aber es ist wirklich einfacher zu verstehen.

689
00:44:40,530 --> 00:44:44,650
Zweiter Tipp, es gibt ein Produkt für den Desktop, das heißt Docker für Windows.

690
00:44:45,449 --> 00:44:49,170
Das macht das alles automatisch. Das gibt es aber nur für Windows 10 in der

691
00:44:49,170 --> 00:44:52,130
Form, nicht für den Windows Server. Kann ich sehr, sehr empfehlen.

692
00:44:52,670 --> 00:44:55,390
Damit wird das alles sehr, sehr viel einfacher. So sieht das dann aus.

693
00:44:55,550 --> 00:44:57,570
Ich habe auch dabei die Skripte in der Folie.

694
00:44:58,390 --> 00:45:00,850
Und dann mein letzter Punkt. Ich hoffe, ihr erlaubt das noch.

695
00:45:03,210 --> 00:45:05,550
Ja, gibt es denn gar keine PowerShell-Commandlets?

696
00:45:08,430 --> 00:45:12,150
Schaut auf die Versionsnummer und ihr wisst alles. Windows Server Container

697
00:45:12,150 --> 00:45:15,449
sind seit einem Jahr veröffentlicht. Es ist auf GitHub immer noch die Version 0.1.

698
00:45:15,510 --> 00:45:18,449
Ich persönlich glaube, meine private Meinung, das wird sterben,

699
00:45:18,489 --> 00:45:19,730
wenn es nicht schon tot ist.

700
00:45:19,730 --> 00:45:23,130
Das heißt, ewiger Ruhm und Lob für den Holger Schwischenberg,

701
00:45:23,250 --> 00:45:27,390
der nicht müde wird, auf heiße Developer und anderen Quellen Artikel zu verfassen,

702
00:45:27,390 --> 00:45:30,930
wo er Docker.exe gegenüber stellt. Wirklich großen Dank, die Geduld möchte ich haben.

703
00:45:31,810 --> 00:45:36,570
Ich schätze das sehr, aber der gut gemeinte Rat ist, guckt euch erst Docker.exe

704
00:45:36,570 --> 00:45:38,969
an. Ja, vielen Dank dafür.

705
00:45:39,250 --> 00:45:43,510
Es gibt das Ganze noch im Client als Projekt Barcelona, so als Stichwort,

706
00:45:43,510 --> 00:45:47,330
wo das im Hintergrund einfach eine Sicherheitsarchitektur darstellt.

707
00:45:47,670 --> 00:45:51,390
Und ich bin gespannt, ob wir in ein paar Jahren darüber reden werden,

708
00:45:51,489 --> 00:45:56,489
wie es weitergegangen ist, ob das dann wirklich die Riesenrevolution ist.

709
00:45:56,400 --> 00:46:07,520
Music.

